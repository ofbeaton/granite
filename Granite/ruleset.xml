<?xml version="1.0"?>
<ruleset name="Granite">
    <description>The coding standard for the Granite Strict PHP Code Style.</description>
      
    <!-- includes Granite Lite -->
    <rule ref="../../granite-lite/GraniteLite"/>
    
    <!-- 
      Generic 
    -->
    <!-- TODO: Make our own DocComment class that only does what we want -->
    <!-- TODO: Generic.Commenting.DocComment.NonParamGroup should have a fix to simply add a blank line -->
    <rule ref="Generic.Commenting.DocComment" />
    <rule ref="Generic.Commenting.DocComment.ShortNotCapital">
      <severity>0</severity>
    </rule>
    <!-- allow file comments to not have short descriptions -->
    <rule ref="Generic.Commenting.DocComment.MissingShort">
      <severity>0</severity>
    </rule>
    <rule ref="Generic.Commenting.Fixme" />
    <!-- code review -->
    <rule ref="Generic.Commenting.Fixme.CommentFound">
      <severity>3</severity>
    </rule>
    <!-- code review -->
    <rule ref="Generic.Commenting.Fixme.TaskFound">
      <severity>3</severity>
    </rule>
    <rule ref="Generic.Commenting.Todo" />
    <!-- code review -->
    <rule ref="Generic.Commenting.Todo.CommentFound">
      <severity>3</severity>
    </rule>
    <!-- code review -->
    <rule ref="Generic.Commenting.Todo.TaskFound">
      <severity>3</severity>
    </rule>
    
    <!--
      Squiz
    -->
    <!-- TODO: Create our own BlockComment class that allows single line variable hints for IDEs --> 
    <rule ref="Squiz.Commenting.BlockComment" />
    <rule ref="Squiz.Commenting.BlockComment.SingleLine">    
      <severity>0</severity>
    </rule>    
    <!-- TODO: Create our own ClassComment class that has the tags we want to require -->
    <rule ref="Squiz.Commenting.ClassComment" />
    <!-- allow tags like @since -->    
    <rule ref="Squiz.Commenting.ClassComment.TagNotAllowed">    
      <severity>0</severity>
    </rule>        
    <rule ref="Squiz.Commenting.ClosingDeclarationComment" />
    <rule ref="Squiz.Commenting.DocCommentAlignment" />
    <rule ref="Squiz.Commenting.EmptyCatchComment" />
    <rule ref="Squiz.Commenting.FunctionComment" />
    <rule ref="Squiz.Commenting.FunctionComment.ParamCommentFullStop">
      <severity>0</severity>
    </rule>
    <rule ref="Squiz.Commenting.FunctionComment.ParamCommentNotCapital">
      <severity>0</severity>
    </rule>    
    <rule ref="Squiz.Commenting.FunctionCommentThrowTag" />
    <!-- TODO: throw $e; should be OK when it match the catch exception type. What can we do about this? -->
    <rule ref="Squiz.Commenting.FunctionCommentThrowTag.WrongNumber">
      <severity>0</severity>
    </rule>
    <rule ref="Squiz.Commenting.InlineComment" />
    <!-- allow inline comments that do not start with a capital -->
    <rule ref="Squiz.Commenting.InlineComment.NotCapital">
      <severity>0</severity>
    </rule>
    <!-- allow inline comments that do not end with a period, exclamation, question -->
    <rule ref="Squiz.Commenting.InlineComment.InvalidEndChar">
      <severity>0</severity>
    </rule>        
    <!-- allow inline comments docblock for dependency injection ints -->
    <rule ref="Squiz.Commenting.InlineComment.DocBlock">
      <severity>0</severity>
    </rule>
    <rule ref="Squiz.Commenting.LongConditionClosingComment" />
    <rule ref="Squiz.Commenting.PostStatementComment" />
    <!-- code review -->
    <rule ref="Squiz.Commenting.PostStatementComment.Found">
      <severity>3</severity>
    </rule>    
    <!-- TODO: create our own VariableComment class that has the tags we want to require -->
    <rule ref="Squiz.Commenting.VariableComment" />
    <!-- allow tags like @since -->
    <rule ref="Squiz.Commenting.VariableComment.TagNotAllowed">
      <severity>0</severity>
    </rule>
               
</ruleset>
