<?xml version="1.0"?>
<ruleset name="granite-syntax">
    <description>Opinionated coding style enforcement for PHP.</description>
  
    <!-- 
      PSR12 
    -->
    <!-- includes PSR1 -->
    <!-- replaces PSR2 -->
    <rule ref="PSR12">
       <!-- PSR-12: PSR12.Operators.OperatorSpacing -->
       <!-- we disagree with PSR-12, we want operator spacing, 
            but not on concatenation. Try to keep the squiz ones instead -->
       <exclude name="PSR12.Operators.OperatorSpacing.NoSpaceBefore"/>
       <exclude name="PSR12.Operators.OperatorSpacing.NoSpaceAfter"/>   
    </rule>
    
    <!-- 
      Generic 
    -->
    <rule ref="Generic.Arrays.DisallowLongArraySyntax"/>
        
    <rule ref="Generic.Classes.DuplicateClassName"/>
    
    <rule ref="Generic.CodeAnalysis.EmptyPHPStatement"/>
    <rule ref="Generic.CodeAnalysis.EmptyStatement"/>
    <rule ref="Generic.CodeAnalysis.ForLoopShouldBeWhileLoop"/>
    <rule ref="Generic.CodeAnalysis.ForLoopWithTestFunctionCall"/>
    <rule ref="Generic.CodeAnalysis.JumbledIncrementer"/>
    
    <rule ref="Generic.CodeAnalysis.UnconditionalIfStatement"/>
    <rule ref="Generic.CodeAnalysis.UnnecessaryFinalModifier"/>    
    <rule ref="Generic.CodeAnalysis.UnusedFunctionParameter"/>
    <!-- code review -->
    <rule ref="Generic.CodeAnalysis.UnusedFunctionParameter.Found">
        <severity>3</severity>
    </rule>
    <rule ref="Generic.CodeAnalysis.UnusedFunctionParameter.FoundBeforeLastUsed">
        <severity>3</severity>
    </rule>
    <rule ref="Generic.CodeAnalysis.UnusedFunctionParameter.FoundAfterLastUsed">
        <severity>3</severity>
    </rule>
    <rule ref="Generic.CodeAnalysis.UselessOverridingMethod"/>
    <!-- code review -->
    <rule ref="Generic.CodeAnalysis.UselessOverridingMethod.Found">
      <severity>3</severity>
    </rule>
    
    <!-- PSR-12: Generic.ControlStructures.InlineControlStructure -->
                            
    <!-- PSR-1: Generic.Files.ByteOrderMark -->
    <!-- PSR-12: Generic.Files.LineEndings -->  
    <!-- PSR-12: Generic.Files.LineLength -->
    <rule ref="Generic.Files.OneClassPerFile"/>
    <rule ref="Generic.Files.OneInterfacePerFile"/>
    <rule ref="Generic.Files.OneTraitPerFile"/>
    
    <!-- PSR-12: Generic.Formatting.DisallowMultipleStatements -->
    <rule ref="Generic.Formatting.SpaceAfterCast">
      <properties>
         <property name="spacing" value="0"/>
      </properties>
    </rule>
    
    <!-- PSR-12: Generic.Functions.FunctionCallArgumentSpacing -->        

    <rule ref="Generic.Metrics.CyclomaticComplexity">
        <properties>
            <property name="complexity" value="10"/>
            <property name="absoluteComplexity" value="100"/>
        </properties>
    </rule>
    <!-- code review -->
    <rule ref="Generic.Metrics.CyclomaticComplexity.TooHigh">
        <severity>3</severity>
    </rule>
    <rule ref="Generic.Metrics.NestingLevel">
        <properties>
            <property name="nestingLevel" value="5"/>
            <property name="absoluteNestingLevel" value="50"/>
        </properties>
    </rule>
    <!-- code review -->
    <rule ref="Generic.Metrics.NestingLevel.TooHigh">
        <severity>3</severity>
    </rule>
    
    <rule ref="Generic.NamingConventions.CamelCapsFunctionName"/>
    <rule ref="Generic.NamingConventions.ConstructorName"/>
    <!-- PSR-1: Generic.NamingConventions.UpperCaseConstantName -->
    
    <rule ref="Generic.PHP.CharacterBeforePHPOpeningTag"/>
    <rule ref="Generic.PHP.DeprecatedFunctions"/>
    <!-- PSR-1: Generic.PHP.DisallowShortOpenTag but modified -->
    <rule ref="Generic.PHP.DisallowShortOpenTag">
      
    </rule>    
    <!-- in PSR-1 but reserved for code review because of edge cases -->
    <rule ref="Generic.PHP.DisallowShortOpenTag.EchoFound">
      <severity>3</severity>
    </rule>
    <rule ref="Generic.PHP.ForbiddenFunctions"/>
    <!-- PSR-12: Generic.PHP.LowerCaseConstant -->
    <!-- PSR-12: Generic.PHP.LowerCaseKeyword -->
    <!-- PSR-12: Generic.PHP.LowerCaseType -->
    <rule ref="Generic.PHP.NoSilencedErrors"/>
    <rule ref="Generic.PHP.SAPIUsage"/>
    <rule ref="Generic.PHP.Syntax"/>
    
    <rule ref="Generic.Strings.UnnecessaryStringConcat"/>
    <!-- code review -->
    <rule ref="Generic.Strings.UnnecessaryStringConcat.Found">
        <severity>3</severity>
    </rule>

    <rule ref="Generic.VersionControl.GitMergeConflict"/>    
    <rule ref="Generic.VersionControl.SubversionProperties"/>
    <!-- set line ending style -->

    <rule ref="Generic.WhiteSpace.ArbitraryParenthesesSpacing">
      <properties>
         <property name="ignoreNewlines" value="true"/>
     </properties>
    </rule>    
    <!-- PSR-12: Generic.WhiteSpace.DisallowTabIndent -->
    <rule ref="Generic.WhiteSpace.IncrementDecrementSpacing"/>
    <rule ref="Generic.WhiteSpace.LanguageConstructSpacing"/>
    
    <!-- PSR-12: Generic.WhiteSpace.ScopeIndent -->
    
    <!-- 
      MySource 
    -->
    <rule ref="MySource.Debug.FirebugConsole"/>
    
    <rule ref="MySource.Objects.AssignThis"/>
    
    <rule ref="MySource.PHP.EvalObjectFactory"/>
    <!-- too strict, we often want to do this for short function calls -->
    <!-- <rule ref="MySource.PHP.ReturnFunctionValue"/> -->
    
    <rule ref="MySource.Strings.JoinStrings"/>
    
    <!--
      Pear
    -->
    <!-- PSR-12: PEAR.Functions.ValidDefaultValue -->
    
    <rule ref="PEAR.Files.IncludingFile"/>
    
    <!--
      PSR-2
    -->
    <!-- PSR-12: PSR2.Classes.ClassDeclaration -->
    <!-- PSR-12: PSR2.Classes.PropertyDeclaration -->
    
    <!-- PSR-12: PSR2.ControlStructures.ControlStructureSpacing -->
    <!-- PSR-12: PSR2.ControlStructures.ElseIfDeclaration -->
    <!-- PSR-12: PSR2.ControlStructures.SwitchDeclaration -->
    
    <!-- PSR-12: PSR2.Files.ClosingTag --> 
    
    <!-- PSR-12: PSR2.Methods.FunctionCallSignature -->
    <!-- PSR-12: PSR2.Methods.FunctionClosingBrace -->
    <!-- PSR-12: PSR2.Methods.MethodDeclaration -->   
     
    <!--
      PSR-12
    -->    
    <!-- PSR-12: PSR12.Classes.ClassInstantiation -->
    
    <!-- PSR-12: PSR12.Functions.NullableTypeDeclaration -->
    
    <!-- PSR-12: PSR12.Keywords.ShortFormTypeKeywords -->
    
    <!-- PSR-12: PSR12.Namespaces.CompoundNamespaceDepth -->           
    
    <!--
      Squiz
    -->
    <rule ref="Squiz.Arrays.ArrayBracketSpacing"/>
    <rule ref="Squiz.Arrays.ArrayDeclaration"/>
    
    <rule ref="Squiz.Classes.ClassDeclaration"/>
    <rule ref="Squiz.Classes.ClassFileName"/>
    <rule ref="Squiz.Classes.DuplicateProperty"/>
    <rule ref="Squiz.Classes.LowercaseClassKeywords"/>
    <rule ref="Squiz.Classes.SelfMemberReference"/>
    <!-- PSR-1: Squiz.Classes.ValidClassName -->
    
    <!-- PSR-12: Squiz.ControlStructures.ControlSignature -->
    <!-- PSR-12: Squiz.ControlStructures.ForEachLoopDeclaration -->
    <!-- PSR-12: Squiz.ControlStructures.ForLoopDeclaration -->  
    <!-- PSR-12: Squiz.ControlStructures.LowercaseDeclaration -->
    <rule ref="Squiz.ControlStructures.SwitchDeclaration">
         <!-- This contradicts PSR2.ControlStructures.SwitchDeclaration -->
         <exclude name="Squiz.ControlStructures.SwitchDeclaration.BreakIndent"/>
         <!-- TODO: Only allow empty case if there is a inline comment -->
         <exclude name="Squiz.ControlStructures.SwitchDeclaration.EmptyCase"/>
    </rule>    
   
    <rule ref="Squiz.CSS.ClassDefinitionClosingBraceSpace"/>
    <rule ref="Squiz.CSS.ClassDefinitionNameSpacing"/>
    <rule ref="Squiz.CSS.ClassDefinitionOpeningBraceSpace"/>
    <rule ref="Squiz.CSS.ColonSpacing"/>
    <rule ref="Squiz.CSS.ColourDefinition"/>
    <rule ref="Squiz.CSS.DisallowMultipleStyleDefinitions"/>
    <rule ref="Squiz.CSS.DuplicateClassDefinition"/>
    <rule ref="Squiz.CSS.DuplicateStyleDefinition"/>
    <rule ref="Squiz.CSS.EmptyClassDefinition"/>
    <rule ref="Squiz.CSS.EmptyStyleDefinition"/>
    <rule ref="Squiz.CSS.ForbiddenStyles"/>
    <rule ref="Squiz.CSS.Indentation"/>
    <rule ref="Squiz.CSS.LowercaseStyleDefinition"/>
    <rule ref="Squiz.CSS.MissingColon"/>
    <rule ref="Squiz.CSS.NamedColours"/>
    <rule ref="Squiz.CSS.Opacity"/>
    <rule ref="Squiz.CSS.SemicolonSpacing"/>
    <rule ref="Squiz.CSS.ShorthandSize"/>
    
    <rule ref="Squiz.Formatting.OperatorBracket"/>
    
    <!-- PSR-12: Squiz.Functions.FunctionDeclaration -->
    <!-- PSR-12: Squiz.Functions.FunctionDeclarationArgumentSpacing -->
    <!-- let's try without these for PSR-12 adoption
    <rule ref="Squiz.Functions.FunctionDeclarationArgumentSpacing.SpacingAfterHint">
      <severity>5</severity>
    </rule>    
    -->
    <rule ref="Squiz.Functions.FunctionDuplicateArgument"/>
    <rule ref="Squiz.Functions.GlobalFunction"/>
    <rule ref="Squiz.Functions.GlobalFunction.Found">
        <message>Consider putting global function "%s" in a class (non-static for testing)</message>
    </rule>
    <!-- PSR-12: Squiz.Functions.LowercaseFunctionKeywords -->
    <!-- PSR-12: Squiz.Functions.MultilineFunctionDeclaration -->
    
    <rule ref="Squiz.Objects.DisallowObjectStringIndex"/>
    <rule ref="Squiz.Objects.ObjectInstantiation"/>
    <rule ref="Squiz.Objects.ObjectMemberComma"/>
    
    <rule ref="Squiz.Operators.ComparisonOperatorUsage"/>
    <rule ref="Squiz.Operators.IncrementDecrementUsage"/>
    <rule ref="Squiz.Operators.ValidLogicalOperators"/>
    
    <rule ref="Squiz.PHP.CommentedOutCode"/>
    <!-- code review -->
    <rule ref="Squiz.PHP.CommentedOutCode.Found">
      <severity>3</severity>
    </rule>
    <rule ref="Squiz.PHP.DisallowBooleanStatement"/>
    <!-- this errors on $m = func() ? 'hi' : 'ho'; -->
    <!-- <rule ref="Squiz.PHP.DisallowComparisonAssignment"/> -->
    <rule ref="Squiz.PHP.DisallowMultipleAssignments"/>
    <!-- TODO: Squiz.PHP.DisallowSizeFunctionsInLoops that allows while loops. while (count($threads) > 0) is too valid to avoid -->
    <!-- TODO: we need something that disallows print_r only if it doesn't return, but prints -->
    <rule ref="Squiz.PHP.DiscouragedFunctions">
      <properties>
         <property name="forbiddenFunctions" type="array">         
           <element key="var_dump" value="null"/>
         </property>
      </properties>    
    </rule>                   
    <rule ref="Squiz.PHP.EmbeddedPhp"/>
    <rule ref="Squiz.PHP.Eval"/>    
    <rule ref="Squiz.PHP.GlobalKeyword"/>
    <rule ref="Squiz.PHP.Heredoc"/>
    <rule ref="Squiz.PHP.InnerFunctions"/>
    <rule ref="Squiz.PHP.LowercasePHPFunctions"/>
    <rule ref="Squiz.PHP.NonExecutableCode"/>
    
    <rule ref="Squiz.Scope.MemberVarScope"/>
    <!-- PSR-12: Squiz.Scope.MethodScope -->
    <rule ref="Squiz.Scope.StaticThisUsage"/>
    
    <!-- conflicts with PSR12.Operators.OperatorSpacing, we will take this one instead -->     
    <rule ref="Squiz.Strings.ConcatenationSpacing">
       <properties>
           <property name="ignoreNewlines" value="true"/>
       </properties>
    </rule>    
    <rule ref="Squiz.Strings.DoubleQuoteUsage"/>
    <rule ref="Squiz.Strings.EchoedStrings"/>
      
    <rule ref="Squiz.WhiteSpace.CastSpacing">
       <!-- let's try without these for PSR-12 adoption
       allow blank lines above catch, elseif, else
       <exclude name="Squiz.WhiteSpace.ControlStructureSpacing.SpacingBeforeClose"/>
       -->        
    </rule>
    <!-- TODO: force blank line above multiple catch, elseif, else -->
    <!-- PSR-12: Squiz.WhiteSpace.ControlStructureSpacing.SpacingAfterOpen -->
    <!-- PSR-12: Squiz.WhiteSpace.ControlStructureSpacing.SpacingBeforeClose -->
        
    <rule ref="Squiz.WhiteSpace.FunctionClosingBraceSpace">
      <!-- TODO: We may want to require 0 spaces before close, this one wants 1 -->
      <!-- allow no blank lines before close -->
      <exclude name="Squiz.WhiteSpace.FunctionClosingBraceSpace.SpacingBeforeClose"/>
    </rule>    
    <rule ref="Squiz.WhiteSpace.FunctionOpeningBraceSpace"/>
    
    <!-- TODO: must allow no lines after class on last method of class -->    
    <rule ref="Squiz.WhiteSpace.FunctionSpacing">
      <!-- allow no lines after method class, for last method in class -->
      <exclude name="Squiz.WhiteSpace.FunctionSpacing.AfterLast"/>
    </rule>
    <rule ref="Squiz.WhiteSpace.LogicalOperatorSpacing"/>
    <rule ref="Squiz.WhiteSpace.MemberVarSpacing"/>
    <rule ref="Squiz.WhiteSpace.ObjectOperatorSpacing"/>
    <!-- we want Squiz.Strings.ConcatenationSpacing, but PSR12.Operators.OperatorSpacing, so take this one instead -->
    <rule ref="Squiz.WhiteSpace.OperatorSpacing"/>
    <rule ref="Squiz.WhiteSpace.PropertyLabelSpacing"/>                                                                
    <!-- PSR-12: Squiz.WhiteSpace.ScopeClosingBrace -->
    <!-- PSR-12: Squiz.WhiteSpace.ScopeKeywordSpacing -->
    <rule ref="Squiz.WhiteSpace.SemicolonSpacing"/>
    <!-- PSR-12: Squiz.WhiteSpace.SuperfluousWhitespace" -->    
    <!-- let's try without these for PSR-12 adoption
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.StartFile">
      <severity>5</severity>
    </rule>
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.EndFile">
      <severity>5</severity>
    </rule>
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.EmptyFile">
      <severity>5</severity>
    </rule>
    -->                    
</ruleset>
