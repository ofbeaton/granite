<?xml version="1.0"?>
<ruleset name="granite-docs">
    <description>Opinionated coding style enforcement for PHP documentation.</description>
    
    <!-- docs is defined as machine-readable docs, like PHPDoc -->
    
    <!-- 
      Generic 
    -->
    <!-- TODO: Make our own DocComment class that only does what we want -->
    <!-- TODO: Generic.Commenting.DocComment.NonParamGroup should have a fix to simply add a blank line -->
    <rule ref="Generic.Commenting.DocComment">
      <!-- allow file comments to not have short descriptions -->
      <exclude name="Generic.Commenting.DocComment.MissingShort"/>
      <exclude name="Generic.Commenting.DocComment.ShortNotCapital"/>
    </rule>

    <rule ref="Generic.Commenting.Fixme"/>
    <!-- code review -->
    <rule ref="Generic.Commenting.Fixme.CommentFound">
      <severity>3</severity>
    </rule>
    <!-- code review -->
    <rule ref="Generic.Commenting.Fixme.TaskFound">
      <severity>3</severity>
    </rule>
    <rule ref="Generic.Commenting.Todo"/>
    <!-- code review -->
    <rule ref="Generic.Commenting.Todo.CommentFound">
      <severity>3</severity>
    </rule>
    <!-- code review -->
    <rule ref="Generic.Commenting.Todo.TaskFound">
      <severity>3</severity>
    </rule>
    
    <!--
      Squiz
    -->
    <!-- TODO: Create our own BlockComment class that allows single line variable hints for IDEs --> 
    <rule ref="Squiz.Commenting.BlockComment">
      <exclude name="Squiz.Commenting.BlockComment.SingleLine"/>
      <!-- sometimes we use block comments to document vars for type hints -->
      <exclude name="Squiz.Commenting.BlockComment.NoEmptyLineAfter"/>
    </rule>    
    <!-- TODO: Create our own ClassComment class that has the tags we want to require -->
    <rule ref="Squiz.Commenting.ClassComment">
         <!-- allow tags like @since -->    
         <exclude name="Squiz.Commenting.ClassComment.TagNotAllowed"/>
    </rule>        
    <rule ref="Squiz.Commenting.ClosingDeclarationComment"/>
    <rule ref="Squiz.Commenting.DocCommentAlignment"/>
    <rule ref="Squiz.Commenting.EmptyCatchComment"/>
    <rule ref="Squiz.Commenting.FunctionComment">
         <exclude name="Squiz.Commenting.FunctionComment.ParamCommentFullStop"/>
         <exclude name="Squiz.Commenting.FunctionComment.ParamCommentNotCapital"/>
         <exclude name="Squiz.Commenting.FunctionComment.ThrowsNoFullStop"/>         
    </rule>                
    <rule ref="Squiz.Commenting.FunctionCommentThrowTag">
      <!-- TODO: throw $e; should be OK when it match the catch exception type. What can we do about this? -->
      <exclude name="Squiz.Commenting.FunctionCommentThrowTag.WrongNumber"/>
    </rule>
    <rule ref="Squiz.Commenting.InlineComment">
      <!-- allow inline comments that do not start with a capital -->
      <exclude name="Squiz.Commenting.InlineComment.NotCapital"/>
      <!-- allow inline comments that do not end with a period, exclamation, question -->
      <exclude name="Squiz.Commenting.InlineComment.InvalidEndChar"/>
      <!-- allow inline comments docblock for dependency injection ints -->
      <exclude name="Squiz.Commenting.InlineComment.DocBlock"/>
    </rule>
    <rule ref="Squiz.Commenting.LongConditionClosingComment"/>
    <rule ref="Squiz.Commenting.PostStatementComment"/>
    <!-- code review -->
    <rule ref="Squiz.Commenting.PostStatementComment.Found">
      <severity>3</severity>
    </rule>    
    <!-- TODO: create our own VariableComment class that has the tags we want to require -->
    <rule ref="Squiz.Commenting.VariableComment">
      <!-- allow tags like @since -->
      <exclude name="Squiz.Commenting.VariableComment.TagNotAllowed"/>
    </rule>
               
</ruleset>
